用例设计部分，无论是手工测试还是自动化测试，都必须要的环节，也是非常重要的环节。
在做自动化测试的时候 ，用例需要考虑前置、步骤和比对。每一个部分都要有提供非常明确的测试数据，要考虑数据的重复使用是否会影响脚本的执行结果。

自动化用例设计原则：
1、不是所有的手工用例都要转为自动化测试用例。
2、考虑到脚本开发的成本，不要选择流程太复杂的用例。如果有必要，可以考虑把流程拆分成多个用例来实现脚本。
3、选择的用例最好可以构建成场景。例如，一个功能模块，分多个用例，多个用例使用同一个场景。?
4、选择的用例可以带有目的性。例如，这部分是用例做冒烟测试，那部分用例是做回归测试等，当然，会存在重叠的关系。如果当前用例不能满足需求，那么唯有修改用例来适应脚本和需求。
5、选取的用例可以是你认为是重复执行，很烦琐的部分。例如，字段验证、提示信息验证这类，这部分适用于回归测试。
6、选取的用例可以是主体流程，这部分适用于冒烟测试。
7、自动化测试也可以用来做配置检查、数据库检查。这些可能超越了手工用例，但也算用例拓展的一部分，项目负责人可以有选择地增加。
8、平时在手工测试时，如果需要构造一些复杂的数据或重复一些简单的机械式动作，则告诉自动化脚本，让它来帮你，或许你的效率会因此而得到提高

在编写自动化测试用例过程中应该遵守以下几点原则：
1、一个用例只验证一个功能点，不要试图在用户登录系统后把所有的功能都验证一遍。
2、尽量少的编写逆向逻辑用例。一方面因为逆向逻辑的用例很多（例如，手号输错有几十种情况）；另一方面自动化脚本本身比较脆弱，对于复杂的逆向逻辑用例实现麻烦且容易出错。
3、用例与用例之间尽量避免产生依赖。
4、一条用例完成测试之后需要对测试场景进行还原，以免影响其它用例的执行。


测试框架原则：
测试框架的设计原则：
1、设定主体运行框架，框架"约定规则"大于代码编写的逻辑
2、框架构造不主要对框架本身代码的设计
3、框架主要的做的是对测试用例的设计，只要设计好测试用例，就可以直接运行测试
4、测试用例设计的原则，测试用例存在相互独立不互相影响（流程性测试用例除外）、注重测试用例的覆盖

约定规则：
    每个测试用例以test_*py来命名
    每个测试类以 Test*来命名  注意T为大写
    设计测试用例的时候 明确标记是要来进行冒烟测试的还是回归测试，我们约定以pytest的@pytest.mark.smoke来进行冒烟测试
    @pytest.mark.domes来标记为回归测试用例
    测试用例的文件名和类型都以英文来命名，且以测试接口来命名，如个人信息接口 /information  测试文件则为 test_information,测试类则为TestInfomation


业务流程测试设计原理

原则：
1、避免每个测试用例，重复编写同个业务步骤
2、避免单个接口改变，所有业务流程测试用例都需要修改

设计：
1、每个接口单独封装，提取需要的数据
2、每个接口尽量预留参数的传值入口
3、业务流程测试，调用每个步骤接口，进行测试

2018 － 11 －06
待解决问题：
1、接口自动化计划在线上跑
2、这套测试数据，是基于测试环境进行设计的
3、不想做两套测试数据，这样的工作量太大了
4、有什么好的设计模式呢？？？？？？？？？