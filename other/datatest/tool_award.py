"""

设置抽奖活动

中奖概率：

        实体商品1中奖概率为: 0.2
        实体商品2中奖概率为: 0%
        现金红包1中奖概率为：0.2
        现金红包2抽奖概率为 0%
        翻倍赏金1中奖概率为  0.3
        翻倍赏金2中奖概率为 0
        谢谢抽奖1中奖概率为 0.2
        谢谢抽奖2中奖概率为 0.1


执行抽奖 2000次

一次并发5个抽奖

执行测试
"""

"""

输出结果：


实体商品1->164 中奖概率为:20.77484559236384
实体商品2->165 中奖概率为:0.0
现金红包1->166 中奖概率为:20.044918585064572
现金红包2->167 中奖概率为:0.0
翻倍赏金1->168 中奖概率为:28.63559797866367
翻倍赏金2->169 中奖概率为:0.0
谢谢抽奖1->170 中奖概率为:20.494104435710277
谢谢抽奖2->171 中奖概率为:10.050533408197643




实体商品1->164 中奖概率为:19.748640305747465
实体商品2->165 中奖概率为:0.0
现金红包1->166 中奖概率为:20.542407761281787
现金红包2->167 中奖概率为:0.0
翻倍赏金1->168 中奖概率为:29.95002204909599
翻倍赏金2->169 中奖概率为:0.0
谢谢抽奖1->170 中奖概率为:19.85153608702043
谢谢抽奖2->171 中奖概率为:9.907393796854329

"""


"""
    接近预期概率  抽奖概率测试通过
"""


import requests

url = "https://test-api.intbee.com/internal/activity/award"

payload = {
	"activity_award_prize_list": [{
			"prize_chance": 0.2,
			"prize_count": 10000,
			"prize_name": "实体商品1",
			"prize_img_url": "string",
			"remark": "领取规则",
			"prize_type": 2
		},
		{
			"prize_chance": 0,
			"prize_count": 10000,
			"prize_name": "实体商品2",
			"prize_img_url": "string",
			"remark": "领取规则",
			"prize_type": 2
		},
		{
			"prize_chance": 0.2,
			"prize_count": 10000,
			"prize_name": "现金红包1",
			"prize_img_url": "string",
			"prize_money": 6.66,
			"remark": "领取规则",
			"prize_type": 0
		},
		{
			"prize_chance": 0,
			"prize_count": 10000,
			"prize_name": "现金红包2",
			"prize_img_url": "string",
			"prize_money": 6.66,
			"remark": "领取规则",
			"prize_type": 0
		},
		{
			"prize_chance": 0.3,
			"prize_count": 10000,
			"prize_name": "佣金翻倍1",
			"prize_img_url": "https://test-item.intbee.com/img/signin_left.2f2cc213.png",
			"prize_multiple": 1.5,
			"remark": "领取规则",
			"prize_type": 1
		},
		{
			"prize_chance": 0,
			"prize_count": 10000,
			"prize_name": "佣金翻倍2",
			"prize_img_url": "https://test-item.intbee.com/img/signin_left.2f2cc213.png",
			"prize_multiple": 1.5,
			"remark": "领取规则",
			"prize_type": 1
		},
		{
			"prize_chance": 0.2,
			"prize_name": "谢谢参与1",
			"prize_img_url": "https://test-item.intbee.com/img/signin_left.2f2cc213.png",
			"remark": "领取规则",
			"prize_type": 3
		},
		{
			"prize_chance": 0.1,
			"prize_name": "谢谢参与2",
			"prize_img_url": "https://test-item.intbee.com/img/signin_left.2f2cc213.png",
			"remark": "领取规则",
			"prize_type": 3
		}
	],
	"activity_name": "概率测试",
	"activity_rule": "活动规则",
	"begin_time": "2019-05-13T03:33:19.938Z",
	"day_award_count": 1,
	"day_count": 3,
	"end_time": "2019-05-22T03:33:19.938Z",
	"poster_img_url": "string",
	"target_user": 0,
	"total_award_count": 1,
	"trigger_condition": 0
}
headers = {
    'Content-Type': "application/json",
    'access_token': "eyJhbGciOiJIUzI1NiJ9.eyJpc3MiOm51bGwsImF1ZCI6IjEwMSIsInN1YiI6IjViMmExNTM1YjBiY2RmMDAwODhkN2NlYSIsImFwcGlkIjoiMTAxIiwiZXhwIjoxNTU4OTUzNjA3LCJqdGkiOiJqT2JwQlR2Z2NhQkFOU3NlbnhidFFRIiwiaWF0IjoxNTU4MzQ4ODA3fQ.c4aNIfbEqDmg_2NwJi1ZL4yg5yJGpyJsUr9ZXlqIW7I",
    'Postman-Token': "e7ce00f9-7de7-4728-bd36-0cfba2e3065f"
    }

response = requests.request("POST", url, json=payload, headers=headers)

print(response.text)




L = []

def dotest():

    """分享商品，获得抽奖次数"""

    url = "https://test-api.intbee.com/mapi/v3/task/success"

    querystring = {"type": "2", "": ""}

    payload = ""
    headers = {
        'Content-Type': "application/json",
        'access_token': "eyJhbGciOiJIUzI1NiJ9.eyJpc3MiOm51bGwsImF1ZCI6IjEwMSIsInN1YiI6IjVkMTU4MzhlNGQyMzI4MDAwNzllZTZiNyIsImFwcGlkIjoiMTAxIiwiZXhwIjoxNTYyMzIwNTYxLCJqdGkiOiJnMVVlWUg4aWw4SXIzSmlUakQ2NWxnIiwiaWF0IjoxNTYxNzE1NzYxfQ.TZoFGqnlPWTfF0XYiaUENSWznpyCjpTHv217TAKwBKA"
    }

    response = requests.request("GET", url, json=payload, headers=headers, params=querystring)

    """执行抽奖"""

    url = "http://test-api.intbee.com/mapi/activity/award/lottery/draw/Z1560334722548"

    payload = ""

    response = requests.request("GET", url, json=payload, headers=headers)

    result = response.json()
    L.append(result['result'])
    return L

import  threading

class MyThread(threading.Thread):

    def __init__(self):

        super(MyThread,self).__init__()

    def run(self):

        print(dotest())


threads=[]
for i in range(0,2000):
    t1 = MyThread()

    t2 = MyThread()

    t3 = MyThread()

    t4 = MyThread()

    t5 = MyThread()

    t1.start()

    t2.start()

    t3.start()

    t4.start()

    t5.start()
    # 守护线程,执行完所有线程后再执行其他程序
    t1.join()
    t2.join()
    t3.join()
    t4.join()
    t5.join()



# print(L)

# # L = [170, 171, 168, 168, 164, 168, 166, 168, 166, 170, 171, 168, 170, 168, 166, 164, 168, 166, 164, 170, 166, 164, 166, 168, 164, 164, 166, 166, 166, 164, 170, 166, 171, 168, 168, 164, 168, 166, 170, 170, 168, 170, 168, 164, 170, 171, 168, 164, 168, 171, 166, 168, 168, 170, 164, 166, 170, 171, 168, 168, 166, 170, 170, 170, 168, 168, 168, 166, 170, 166, 168, 164, 168, 164, 171, 168, 170, 170, 170, 171, 166, 164, 164, 164, 166, 164, 164, 166, 168, 164, 170, 171, 166, 164, 168, 170, 168, 170, 168, 170, 170, 171, 168, 168, 166, 168, 164, 164, 166, 164, 168, 168, 166, 170, 168, 168, 164, 170, 168, 170, 166, 170, 170, 170, 166, 170, 168, 164, 168, 170, 164, 164, 170, 168, 168, 170, 170, 166, 171, 168, 170, 168, 168, 168, 168, 166, 164, 164, 164, 168, 170, 164, 170, 164, 170, 168, 168, 164, 170, 166, 164, 166, 164, 171, 164, 171, 168, 170, 164, 168, 166, 168, 164, 170, 166, 164, 164, 171, 170, 168, 170, 168, 168, 164, 170, 166, 164, 171, 168, 166, 170, 168, 170, 168, 168, 168, 170, 168, 164, 168, 170, 168, 166, 168, 164, 170, 164, 171, 166, 166, 170, 168, 170, 168, 166, 168, 164, 164, 170, 171, 171, 168, 171, 164, 170, 170, 164, 164, 168, 168, 166, 170, 168, 164, 170, 170, 164, 164, 168, 166, 166, 170, 164, 170, 170, 164, 168, 171, 168, 166, 166, 170, 166, 168, 168, 170, 170, 168, 168, 164, 166, 170, 164, 164, 170, 171, 166, 168, 164, 168, 166, 170, 171, 166, 166, 168, 164, 168, 168, 168, 168, 168, 170, 166, 164, 166, 168, 168, 164, 166, 170, 170, 164, 164, 171, 166, 168, 168, 164, 168, 171, 166, 166, 166, 164, 171, 168, 168, 164, 168, 170, 164, 168, 164, 166, 168, 170, 164, 166, 170, 170, 170, 164, 168, 170, 170, 170, 168, 164, 166, 168, 166, 164, 168, 168, 166, 170, 166, 170, 166, 170, 166, 168, 170, 171, 171, 171, 164, 168, 166, 164, 164, 164, 168, 166, 170, 168, 166, 171, 168, 164, 170, 166, 166, 168, 170, 164, 164, 164, 170, 170, 168, 171, 168, 168, 166, 171, 164, 164, 170, 168, 164, 164, 168, 168, 170, 170, 166, 168, 164, 168, 166, 168, 168, 171, 168, 171, 164, 170, 170, 170, 166, 170, 170, 171, 170, 166, 171, 168, 166, 171, 170, 171, 168, 170, 168, 164, 171, 168, 170, 164, 170, 170, 164, 168, 171, 168, 170, 164, 170, 164, 164, 166, 170, 171, 168, 166, 171, 168, 168, 168, 166, 171, 170, 164, 168, 164, 168, 170, 168, 166, 170, 170, 171, 164, 170, 166, 168, 166, 170, 166, 168, 168, 164, 170, 166, 166, 164, 166, 168, 170, 168, 170, 166, 171, 166, 170, 164, 164, 166, 164, 170, 166, 168, 168, 166, 171, 170, 170, 170, 164, 171, 168, 170, 168, 166, 166, 171, 164, 168, 171, 164, 171, 164, 168, 166, 168, 170, 164, 166, 168, 164, 170, 166, 166, 166, 168, 168, 166, 170, 170, 168, 170, 166, 166, 168, 166, 166, 164, 166, 168, 170, 166, 164, 170, 166, 164, 171, 168, 166, 164, 168, 170, 170, 164, 168, 170, 168, 168, 166, 168, 164, 166, 170, 171, 164, 168, 170, 170, 168, 166, 168, 164, 166, 166, 164, 164, 166, 170, 171, 164, 168, 166, 164, 170, 171, 168, 164, 170, 168, 170, 164, 170, 168, 164, 170, 164, 168, 164, 168, 166, 164, 170, 168, 170, 164, 166, 168, 170, 168, 168, 164, 171, 171, 168, 166, 164, 170, 171, 168, 166, 168, 166, 171, 171, 170, 168, 171, 164, 168, 164, 170, 164, 170, 168, 166, 171, 170, 168, 164, 166, 168, 170, 164, 166, 168, 164, 166, 168, 171, 164, 170, 168, 166, 168, 166, 170, 170, 166, 164, 168, 166, 164, 168, 164, 168, 166, 170, 166, 164, 168, 166, 168, 171, 164, 166, 164, 166, 170, 168, 166, 164, 168, 166, 164, 168, 166, 168, 164, 166, 168, 171, 166, 168, 166, 164, 168, 166, 170, 170, 164, 171, 168, 166, 164, 170, 168, 170, 164, 166, 168, 170, 171, 166, 168, 164, 170, 166, 168, 171, 166, 168, 164, 166, 168, 171, 164, 166, 168, 164, 168, 171, 171, 164, 171, 168, 171, 164, 168, 166, 164, 168, 170, 166, 171, 171, 168, 164, 166, 171, 168, 170, 164, 168, 168, 168, 164, 166, 168, 170, 164, 166, 168, 166, 164, 168, 166, 171, 164, 170, 168, 171, 164, 168, 170, 171, 168, 170, 170, 164, 168, 171, 168, 166, 170, 164, 168, 166, 170, 164, 168, 166, 170, 164, 168, 166, 170, 164, 168, 166, 170, 164, 168, 164, 168, 171, 164, 170, 168, 171, 170, 164, 168, 170, 164, 168, 171, 166, 168, 170, 170, 166, 170, 168, 164, 166, 170, 171, 168, 164, 166, 171, 168, 164, 166, 171, 168, 164, 168, 171, 170, 170, 164, 168, 166, 168, 166, 168, 166, 164, 168, 171, 166, 168, 166, 170, 170, 168, 170, 166, 170, 170, 168, 166, 164, 168, 171, 164, 168, 170, 164, 170, 168, 170, 168, 164, 168, 170, 168, 164, 168, 166, 164, 170, 168, 170, 168, 164, 168, 164, 168, 170, 168, 166, 164, 171, 168, 166, 164, 168, 170, 166, 170, 170, 168, 164, 170, 171, 170, 170, 168, 166, 170, 164, 168, 164, 170, 168, 170, 164, 171, 171, 168, 170, 164, 166, 168, 164, 170, 166, 170, 171, 168, 166, 168, 170, 164, 166, 168, 171, 168, 168, 170, 168, 166, 168, 164, 166, 171, 168, 164, 166, 168, 164, 166, 168, 164, 168, 166, 164, 170, 168, 164, 170, 168, 170, 168, 166, 168, 170, 166, 168, 164, 171, 170, 168, 171, 164, 168, 166, 164, 168, 170, 164, 168, 166, 164, 168, 166, 164, 168, 166, 164, 168, 166, 168, 166, 170, 168, 170, 164, 166, 168, 164, 170, 166, 168, 164, 166, 168, 171, 164, 171, 168, 164, 171, 168, 164, 168, 170, 166, 170, 168, 170, 164, 170, 168, 166, 171, 164, 171, 168, 170, 171, 166, 168, 164, 168, 170, 164, 168, 171, 166, 168, 166, 168, 164, 166, 168, 170, 168, 166, 168, 170, 168, 166, 168, 166, 168, 171, 166, 170, 168, 164, 168, 170, 164, 170, 168, 170, 170, 170, 164, 168, 166, 164, 168, 166, 164, 171, 168, 166, 171, 164, 170, 168, 166, 168, 170, 166, 168, 164, 166, 168, 170, 166, 168, 170, 166, 168, 170, 166, 168, 170, 171, 164, 168, 170, 166, 164, 168, 164, 168, 164, 168, 170, 166, 168, 170, 166, 168, 170, 166, 168, 170, 164, 168, 170, 171, 168, 171, 164, 168, 164, 166, 168, 164, 166, 168, 170, 164, 171, 166, 168, 164, 166, 168, 164, 168, 164, 166, 164, 166, 168, 164, 170, 170, 170, 168, 164, 170, 166, 168, 164, 168, 164, 171, 168, 164, 168, 171, 164, 168, 164, 166, 168, 164, 166, 168, 170, 164, 171, 166, 170, 170, 171, 164, 168, 170, 164, 168, 170, 170, 164, 168, 171, 164, 170, 170, 168, 170, 164, 171, 166, 171, 168, 170, 166, 168, 171, 170, 166, 170, 168, 166, 168, 171, 170, 170, 166, 171, 170, 168, 166, 171, 164, 168, 166, 168, 166, 164, 168, 166, 164, 168, 170, 170, 164, 168, 170, 170, 164, 168, 166, 171, 164, 168, 166, 164, 168, 170, 166, 164, 170, 168, 164, 168, 170, 164, 168, 171, 166, 164, 168, 170, 166, 168, 171, 170, 166, 168, 164, 166, 168, 170, 171, 164, 170, 168, 164, 166, 170, 168, 164, 168, 164, 166, 171, 168, 164, 170, 168, 164, 171, 168, 166, 168, 171, 166, 168, 170, 170, 168, 164, 170, 168, 166, 168, 170, 164, 168, 170, 164, 166, 168, 171, 164, 170, 166, 168, 170, 166, 164, 168, 171, 164, 168, 171, 166, 168, 170, 164, 168, 171, 166, 166, 171, 168, 164, 166, 168, 166, 168, 166, 170, 164, 168, 166, 171, 168, 164, 168, 166, 168, 170, 170, 171, 171, 170, 171, 164, 171, 168, 168, 170, 166, 168, 164, 168, 164, 170, 168, 168, 166, 168, 166, 164, 168, 170, 164, 170, 166, 168, 164, 168, 170, 164, 168, 166, 170, 168, 166, 164, 168, 170, 168, 170, 166, 168, 170, 170, 168, 166, 168, 166, 164, 166, 168, 166, 164, 166, 164, 171, 164, 168, 168, 170, 168, 170, 166, 168, 168, 166, 171, 166, 164, 170, 168, 170, 164, 166, 170, 168, 166, 164, 168, 171, 166, 164, 164, 170, 164, 164, 170, 168, 164, 168, 171, 170, 168, 171, 168, 166, 164, 168, 166, 168, 166, 168, 166, 166, 164, 168, 166, 164, 166, 168, 166, 164, 164, 168, 168, 164, 170, 168, 170, 168, 164, 170, 168, 164, 170, 170, 168, 171, 166, 164, 170, 171, 170, 171, 166, 164, 170, 164, 166, 168, 171, 164, 168, 166, 168, 168, 170, 164, 171, 170, 164, 168, 171, 164, 170, 170, 164, 171, 164, 166, 168, 164, 164, 170, 164, 166, 170, 170, 168, 170, 168, 168, 166, 170, 166, 166, 168, 166, 170, 166, 171, 166, 166, 164, 170, 166, 166, 166, 166, 171, 168, 164, 166, 168, 170, 166, 166, 168, 166, 164, 168, 166, 168, 166, 171, 170, 166, 168, 164, 164, 168, 164, 170, 170, 171, 164, 166, 168, 164, 168, 170, 166, 168, 171, 171, 168, 164, 170, 171, 168, 166, 170, 168, 170, 166, 170, 166, 168, 166, 168, 166, 168, 164, 171, 168, 164, 171, 168, 166, 168, 166, 164, 168, 166, 164, 168, 170, 166, 168, 168, 168, 168, 164, 168, 166, 164, 168, 171, 166, 164, 168, 171, 168, 166, 168, 164, 166, 170, 168, 170, 164, 170, 166, 164, 168, 164, 164, 166, 170, 164, 168, 168, 170, 166, 168, 164, 170, 171, 166, 168, 171, 170, 168, 171, 164, 168, 171, 166, 168, 170, 164, 168, 164, 166, 168, 166, 168, 171, 164, 166, 164, 170, 168, 164, 171, 168, 164, 166, 168, 164, 168, 164, 164, 170, 168, 171, 166, 168, 164, 166, 170, 170, 166, 168, 171, 171, 164, 166, 166, 170, 168, 170, 164, 168, 166, 164, 168, 166, 170, 168, 170, 166, 164, 168, 170, 164, 166, 168, 164, 166, 170, 164, 166, 168, 166, 170, 164, 168, 164, 168, 164, 171, 166, 168, 170, 164, 166, 170, 170, 166, 168, 164, 166, 170, 171, 166, 168, 166, 171, 168, 166, 168, 164, 166, 170, 170, 168, 166, 168, 171, 166, 170, 164, 170, 170, 168, 170, 170, 171, 170, 171, 171, 170, 168, 171, 166, 170, 170, 168, 166, 164, 166, 168, 171]

count = len(L)
# print(count)
# myset = [164,165,166,167,168,169,170,171]
myset = [172,173,174,175,176,177,178,179]
for item in myset:
        if item == 172:
            print("实体商品1->%s"% item,"中奖概率为:%s" % (100 * L.count(item)/count))
        elif item == 173:
            print("实体商品2->%s" % item, "中奖概率为:%s" % (100 * L.count(item) / count))
        elif item == 174:
            print("现金红包1->%s" % item, "中奖概率为:%s" % (100 * L.count(item) / count))
        elif item == 175:
            print("现金红包2->%s" % item, "中奖概率为:%s" % (100 * L.count(item) / count))
        elif item == 176:
            print("翻倍赏金1->%s" % item, "中奖概率为:%s" % (100 * L.count(item) / count))

        elif item == 177:
            print("翻倍赏金2->%s" % item, "中奖概率为:%s" % (100 * L.count(item) / count))

        elif item == 178:
            print("谢谢抽奖1->%s" % item, "中奖概率为:%s" % (100 * L.count(item) / count))

        else:
            print("谢谢抽奖2->%s" % item, "中奖概率为:%s" % (100 * L.count(item) / count))




from mysql.new import Pydb

# a = Pydb("intbee")
# cursor = a.dodb()
#
# sql ='SELECT prize_id FROM intbee_activity_award_spread WHERE uuid="5ce28aee46e0fb0006085f9f";'
# cursor.execute(sql)
# results = cursor.fetchall()
#
# L = []
# for i in results:
#     L.append(i['prize_id'])
#
# count = len(L)
# print(count)
# myset = [164,165,166,167,168,169,170,171]
# for item in myset:
#         if item == 164:
#             print("实体商品1->%s"% item,"中奖概率为:%s" % (100 * L.count(item)/count))
#         elif item == 165:
#             print("实体商品2->%s" % item, "中奖概率为:%s" % (100 * L.count(item) / count))
#         elif item == 166:
#             print("现金红包1->%s" % item, "中奖概率为:%s" % (100 * L.count(item) / count))
#         elif item == 167:
#             print("现金红包2->%s" % item, "中奖概率为:%s" % (100 * L.count(item) / count))
#         elif item == 168:
#             print("翻倍赏金1->%s" % item, "中奖概率为:%s" % (100 * L.count(item) / count))
#
#         elif item == 169:
#             print("翻倍赏金2->%s" % item, "中奖概率为:%s" % (100 * L.count(item) / count))
#
#         elif item == 170:
#             print("谢谢抽奖1->%s" % item, "中奖概率为:%s" % (100 * L.count(item) / count))
#
#         else:
#             print("谢谢抽奖2->%s" % item, "中奖概率为:%s" % (100 * L.count(item) / count))
# print(L)
# a.close()




